#!/usr/bin/env ruby

require 'date'

require_relative 'bootstrap_ar'
database = ENV['KTB_ENV'] || 'development'
connect_to database

command = ARGV[0]

user_name = ARGV[1]
params = { command: command, user: { name: user_name } }
user_controller = UserController.new(params)

user_id = ARGV[1]
daily_params = { command: command, daily_check_in: { user_id: user_id } }
daily_check_in_controller = DailyCheckInController.new(daily_params)

if command == "add"
  user_controller.add
elsif command == "list"
  user_controller.list
elsif command == "remove"
  user_controller.remove
elsif command == "remove_all"
  user_controller.remove_all

elsif command == "list_daily"
  daily_check_in_controller.list
elsif command == "remove_daily"
  daily_check_in_controller.remove
elsif command == "remove_all_daily"
  daily_check_in_controller.remove_all
end

def welcome
  puts "Welcome to Karma to Burn.\nWhat is your first name?"
  entered_name = gets.chomp.capitalize
  puts "Hello, #{entered_name}. What is your date of birth?"
  entered_date_of_birth = gets.chomp
  puts generate_greeting(entered_name, entered_date_of_birth)
  puts "Press enter to continue."
  gets
end

def date
  time = Time.new
  month = time.month
  month = "%02d" % month
  return "#{time.year}-#{month}-#{time.day}"
end

def generate_greeting(name, date_of_birth)
  if User.where(name: name).exists? && User.where(date_of_birth: date_of_birth).exists?
    @current_user = User.where(name: name, date_of_birth: date_of_birth).first
    puts "Welcome back, #{name}.\n"
    check_in
  else
    @current_user = User.create(name: name, date_of_birth: date_of_birth)
    @current_daily_check_in = @current_user.daily_check_ins.create(:date => date)
    puts @current_daily_check_in.physiological_points
    return "Greetings, #{name}.\n", instructions
  end
end

def check_in
  last_check_in = @current_user.daily_check_ins.last.date
  if last_check_in.to_s == date
    puts "You have already been here today. Come back tomorrow, imbecile!"
    exit
  else
    @current_daily_check_in = @current_user.daily_check_ins.create(:date => date)
    puts @current_daily_check_in
  end
end

def instructions
  return "Please assess the following statements. Type true if you agree and false if you don't."
  # `read -sn 1 -p "Press any key to continue.\n"`
end

def analysis(response, category)
  if response == "true"
    `say "well done!"`
    @current_daily_check_in.increment! category
  elsif response == "false"
    `say "fail!"`
    @current_daily_check_in.decrement! category
  else
    puts "Type true or false, imbecile."
    physiological if category == :physiological_points
    safety if category == :safety_points
    esteem if category == :esteem_points
    love if category == :love_points
    transcendence if category == :transcendence_points
  end
end

def physiological
  statements = ["Today, I ate nutritious foods from most, if not all, of the food groups.", "I got enough sleep last night."]
  statements.each do |statement|
    puts statement
    response = gets.chomp
    analysis(response, :physiological_points)
  end
end

def safety
  statements = ["I did not do anything reckless today. I acted with safely and caution in my daily exploits."]
  statements.each do |statement|
    puts statement
    response = gets.chomp
    analysis(response, :safety_points)
  end
end

def esteem
  statements = ["I am proud of my accomplishments today.", "I look forward to the challenges that tomorrow will bring."]
  statements.each do |statement|
    puts statement
    response = gets.chomp
    analysis(response, :esteem_points)
  end
end

def love
  statements = ["Today, I attempted to spent time with people I care about."]
  statements.each do |statement|
    puts statement
    response = gets.chomp
    analysis(response, :love_points)
  end
end

def transcendence
  statements = ["Today, I thought about the 'bigger picture'. I am curious about the world and my place in it. I seek enlightenment."]
  statements.each do |statement|
    puts statement
    response = gets.chomp
    analysis(response, :transcendence_points)
  end
end

def daily_points
  current_check_in = DailyCheckIn.where(:date => date, :user_id => @current_user[:id]).first
  daily_points = (current_check_in.physiological_points) + (current_check_in.safety_points) + (current_check_in.esteem_points) + (current_check_in.love_points) + (current_check_in.transcendence_points)
end

def total_points
  daily_check_in = DailyCheckIn.where(:user_id => @current_user[:id]).all
  total_points = 0
  i = 0
  until i == daily_check_in.length do
    total_points = total_points + daily_check_in[i].physiological_points + daily_check_in[i].safety_points + daily_check_in[i].esteem_points + daily_check_in[i].love_points + daily_check_in[i].transcendence_points
    i += 1
  end
  total_points
end

def daily_report
  puts "You have earned #{daily_points} Karma Points."
  if daily_points <= 1
    puts "Get it together, imbecile."
  else
    puts "Well done, heathen."
  end
  puts "You have #{total_points} total points."
end

welcome
date
physiological
safety
esteem
love
transcendence
total_points
daily_report