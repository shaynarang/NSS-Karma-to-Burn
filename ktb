#!/usr/bin/env ruby

require 'date'

require_relative 'bootstrap_ar'
database = ENV['KTB_ENV'] || 'development'
connect_to database

command = ARGV[0]

user_name = ARGV[1]
params = { command: command, user: { name: user_name } }
user_controller = UserController.new(params)

user_id = ARGV[1]
daily_params = { command: command, daily_check_in: { user_id: user_id } }
daily_check_in_controller = DailyCheckInController.new(daily_params)

if command == "add"
  user_controller.add
elsif command == "list"
  user_controller.list
elsif command == "remove"
  user_controller.remove
elsif command == "remove_all"
  user_controller.remove_all

elsif command == "list_daily"
  daily_check_in_controller.list
elsif command == "remove_daily"
  daily_check_in_controller.remove
elsif command == "remove_all_daily"
  daily_check_in_controller.remove_all
end

def welcome
  puts "Welcome to Karma to Burn.\nWhat is your first name?"
  entered_name = gets.chomp.capitalize
  puts "Hello, #{entered_name}. What is your date of birth?"
  entered_date_of_birth = gets.chomp
  puts generate_greeting(entered_name, entered_date_of_birth)
  puts "Press enter to continue."
  gets
end

def date
  time = Time.new
  month = time.month
  month = "%02d" % month
  day = time.day
  day = "%02d" % day
  return "#{time.year}-#{month}-#{day}"
end

def generate_greeting(name, date_of_birth)
  if User.where(name: name).exists? && User.where(date_of_birth: date_of_birth).exists?
    @current_user = User.where(name: name, date_of_birth: date_of_birth).first
    puts "Welcome back, #{name}.\n"
    check_in
  else
    @current_user = User.create(name: name, date_of_birth: date_of_birth)
    @current_daily_check_in = DailyCheckIn.new(:date => date, :physiological_points => 0, :safety_points => 0, :esteem_points => 0, :love_points => 0, :transcendence_points => 0, :user_id => @current_user.id, :spent_points => 0, :total_points => 0)
    return "Greetings, #{name}.\n", instructions
  end
end

def check_in
  last_check_in = @current_user.daily_check_ins.last.date
  if last_check_in.to_s == date
    puts "You have already been here today. Come back tomorrow, imbecile!"
    `say "Imbecile!"`
    # @current_daily_check_in = DailyCheckIn.where(:date => date).first
    # store
    exit
  else
    @current_daily_check_in = DailyCheckIn.new(:date => date, :physiological_points => 0, :safety_points => 0, :esteem_points => 0, :love_points => 0, :transcendence_points => 0, :user_id => @current_user.id, :spent_points => 0, :total_points => 0)
  end
end

def instructions
  return "Please assess the following statements. Type true if you agree and false if you don't."
end

def analysis(response, category)
  if response == "true"
    `say "Well done!"`
    @current_daily_check_in.increment! category
  elsif response == "false"
    `say "Fail!"`
    # @current_daily_check_in.decrement! category
  else
    puts "Type true or false, imbecile."
    `say "Imbecile!"`
    @current_daily_check_in.update_attributes! category => 0
    physiological if category == :physiological_points
    safety if category == :safety_points
    esteem if category == :esteem_points
    love if category == :love_points
    transcendence if category == :transcendence_points
  end
end

def physiological
  statements = ["Today, I ate nutritious foods from most, if not all, of the food groups.", "I got enough sleep last night."]
  statements.each do |statement|
    puts statement
    response = gets.chomp.downcase
    analysis(response, :physiological_points)
  end
end

def safety
  statements = ["I did not do anything reckless today. I acted with caution in my daily exploits.", "I did not injure myself today."]
  statements.each do |statement|
    puts statement
    response = gets.chomp.downcase
    analysis(response, :safety_points)
  end
end

def esteem
  statements = ["I am proud of my accomplishments today.", "I look forward to the challenges that tomorrow will bring."]
  statements.each do |statement|
    puts statement
    response = gets.chomp.downcase
    analysis(response, :esteem_points)
  end
end

def love
  statements = ["Today, I attempted to spend time or communicate with people I care about.", "Today, the encounters I had with others were mostly positive."]
  statements.each do |statement|
    puts statement
    response = gets.chomp.downcase
    analysis(response, :love_points)
  end
end

def transcendence
  statements = ["Today, I was curious about the world and my place in it.", "I learned something about myself today, even it is just a little."]
  statements.each do |statement|
    puts statement
    response = gets.chomp.downcase
    analysis(response, :transcendence_points)
  end
end

def daily_points
  current_check_in = DailyCheckIn.where(:date => date, :user_id => @current_user[:id]).first
  todays_points = current_check_in.physiological_points + current_check_in.safety_points + current_check_in.esteem_points + current_check_in.love_points + current_check_in.transcendence_points
  @current_daily_check_in.update_attributes! :total_points => todays_points
  todays_points
end

def total_points
  current_check_in = DailyCheckIn.where(:user_id => @current_user[:id]).all
  past_daily_points = 0
  past_spent_points = 0
  counter = 0
  until counter == current_check_in.length do
    past_daily_points = past_daily_points + current_check_in[counter].physiological_points + current_check_in[counter].safety_points + current_check_in[counter].esteem_points + current_check_in[counter].love_points + current_check_in[counter].transcendence_points
    past_spent_points = past_spent_points + current_check_in[counter].spent_points
    counter += 1
  end
  result = past_daily_points - past_spent_points
end

def total_minutes
  total_time = total_points * 6
end

def daily_report
  puts "You have earned #{daily_points} Karma Points today."
  if daily_points <= 4
    puts "Get it together."
    `say "Imbecile!"`
  else
    puts "Good work."
    `say "Champion!"`
  end
end

def store
  puts "You have a total of #{total_points} Karma Points. Would you like to spend any Karma Points today?"
  response = gets.chomp.downcase
  if response == "yes"
    puts "One Karma Point will bring you six minutes of bliss. How many points would you like to spend?"
  elsif response == "no"
    puts "Goodbye."
    exit
  else
    puts "Type yes or no, imbecile!"
    `say "Imbecile!"`
    store
  end
  redeemed_points = gets.chomp.to_i
  puts "Are you sure you would like to spend #{redeemed_points} Karma Points?"
  response = gets.chomp.downcase
  if response == "yes"
    @current_daily_check_in.update_attributes! :spent_points => redeemed_points
    @current_daily_check_in.update_attributes! :total_points => total_points
    puts "You have #{total_points} Karma Points remaining."
  elsif response == "no"
    store
  else
    puts "Type yes or no, imbecile!"
    `say "Imbecile!"`
    store
  end
end

welcome
date
physiological
safety
esteem
love
transcendence
daily_report
store